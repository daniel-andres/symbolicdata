#+TITLE: Todo-list for SDEval project
#+AUTHOR: Albert Heinle
#+DATE: <2014-08-15 Fri>

* TODO (partly DONE) Analyse the output of computer algebra systems
Up until now, we are not able to check the output of the computer
algebra systems. There could be the following milestones defined:
 - [X] Check if there is an output that has at least the form of a solution to the
   given problem (i.e. maybe track a segmentation fault and identify
   a possible error)
   - Done for FA_Q_dp for Singular, GAP and Magma
   - Done for GB_Z_lp for Singular
 - [ ] Check the solution of the computer algebra system for correctness
   (unrealistic for some tasks, as undecidable in certain cases)

* TODO Run Tasks in parallel
Right now, when running runTasks.py, there is at most one computer
algebra system running at a time, executing exactly one task. In the
future, we would like to provide the possibility of running several
tasks in parallel.
* TODO Allow executable files as parameters AND piping of their content
By now, we pipe the content of executable files to the computer
algebra systems. There should also be an option to just give the path
to the executable file, and the CAS can read it.
* DONE Provide with the resultFiles information about the machine you were running your tasks on
Right now, we do not provide information about the machine, where a
task was run at. Also here, a common format is needed.
A common way to do that is using the sysctl command.

In order to get information about memory, the command would be
~sysctl -a | grep "mem"~

In order to get information about the cpu, the command would be
~sysctl -a | grep "cpu"~

Operating system information
~sysctl -a | grep "os"~
* DONE Do not copy everything from casSources
We give the users the freedom of excluding certain computations from
the list if they wish for it. But still, the executable files from
casSources will be copied to the folder results, no matter what. We
should copy only those sources, for which there have been results calculated.
* TODO Deal with Maples mserver sub-process
When calling Maple and feeding it with commands, the actual
computations will be executed by a binary called =mserver=. For
timing purposes, this is fatal, as we will have to time a
subprocess. A temporary fix was given after I asked the question about how
to deal with it in StackOverflow:

* TODO Provide some more documentation about the interconnection of the modules in the code.
By now, one has to deeply read the documentation of each function,
but there is no document stating the interconnection between all the
modules. This needs to be changed in the future.
* TODO Code Beautification
For Example:
 - [ ] Put code in =runTasks.py= in an ~if __name__ = "__main__"~
   statement
 - [ ] =FA_Q_dp= template for solution code prettification.
 - [ ] We need a constants.py of some sort, in order to handle all
   the changes that might happen.

* TODO GUI
 - [ ] Make it more portable (i.e. use XML-files to create GUI and
   leave code to just being the executable part
 - [ ] Problem instance double click preview should also work for the
   already added problem instances.

* TODO GAP does not print non-commutative polynomials properly
For the Computation problem FA_GB_dp, GAP does not print the
multiplication operator, i.e. =*= between the variables. This needs
to get fixed.
* TODO Indicate in the resultsFolder if the calculation has been terminated earl
If =runTasks.py= is terminated early, the proceedings still say
"running" for at least one calculation. It would be cool if there is
like a script that gets executed in the case of early termination,
which makes sure that the info is in the HTML- or XML-files.
* TODO Add possibility to "resume" computation
Lets say, somebody unplugs your computer unintendedly (or indendedly
;-))
Then there should be a possibility to say "resume calculations", so
that one does not have to deal with two different resulting folders.
